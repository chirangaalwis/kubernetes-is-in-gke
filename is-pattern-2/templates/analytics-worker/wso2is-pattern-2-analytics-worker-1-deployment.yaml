# Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}-analytics-worker-1-deployment
  namespace : {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.wso2.deployment.wso2isAnalyticsWorker1.replicas }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.wso2.deployment.wso2isAnalyticsWorker1.strategy.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.wso2.deployment.wso2isAnalyticsWorker1.strategy.rollingUpdate.maxUnavailable }}
    type: RollingUpdate
  selector:
    matchLabels:
      deployment: wso2is-analytics-worker
      app: is-pattern-2
      monitoring: {{ .Values.wso2.monitoring.prometheus.jmxJobName }}
      node: node-1
  template:
    metadata:
      labels:
        deployment: wso2is-analytics-worker
        app: is-pattern-2
        monitoring: {{ .Values.wso2.monitoring.prometheus.jmxJobName }}
        node: node-1
    spec:
      initContainers:
      {{- if and .Values.wso2.deployment.db.host (.Values.wso2.deployment.db.port) }}
      - name: init-iam-db
        image: busybox:1.31
        command: ['sh', '-c', 'echo -e "Checking for the availability of DBMS service"; while ! nc -z {{ .Values.wso2.deployment.db.host }} {{ .Values.wso2.deployment.db.port }}; do sleep 1; printf "-"; done; echo -e "  >> DBMS service is available";']
      {{- end }}

      {{ if .Values.wso2.centralizedLogging.enabled }}
      - name: init-logstash-plugins-install
        image: docker.elastic.co/logstash/logstash:{{ .Values.wso2.centralizedLogging.logstash.imageTag }}
        command:
        - /bin/bash
        - "-c"
        - |
          set -e
          ./bin/logstash-plugin install logstash-codec-multiline logstash-filter-grok
        volumeMounts:
        - name: shared-plugins
          mountPath: /usr/share/logstash/plugins/
      - name: init-elasticsearch
        image: busybox:1.31
        command: ['sh', '-c', 'echo -e "Checking for the availability of Elasticsearch Server deployment"; while ! nc -z {{ .Values.wso2.centralizedLogging.logstash.elasticsearch.host }} 9200; do sleep 1; printf "-"; done; echo -e "  >> Elasticsearch server has started";']
      {{ end }}

      {{ if .Values.wso2.monitoring.enabled }}
      - name: init-jmx-exporter
        image: busybox:1.31
        command:
        - /bin/sh
        - "-c"
        - |
          set -e
          wget https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.12.0/jmx_prometheus_javaagent-0.12.0.jar -P /jmx-jar/
        volumeMounts:
        - name: shared-prometheus-jmx-jar
          mountPath: /jmx-jar
      {{ end }}

      containers:
      - name: wso2is-analytics-worker-1
        {{- if .Values.wso2.deployment.wso2isAnalyticsWorker1.dockerRegistry }}
        image: {{ .Values.wso2.deployment.wso2isAnalyticsWorker1.dockerRegistry }}/{{ .Values.wso2.deployment.wso2isAnalyticsWorker1.imageName }}
        {{- $tag := .Values.wso2.deployment.wso2isAnalyticsWorker1.imageTag }}
        {{- if not (eq $tag "") }}{{- printf ":%s" $tag -}}{{- end }}
        {{- else if or (eq .Values.wso2.subscription.username "") (eq .Values.wso2.subscription.password "") }}
        image: wso2/{{ .Values.wso2.deployment.wso2isAnalyticsWorker1.imageName }}:{{ .Values.wso2.deployment.wso2isAnalyticsWorker1.imageTag }}
        {{- else }}
        image: docker.wso2.com/{{ .Values.wso2.deployment.wso2isAnalyticsWorker1.imageName }}:{{ .Values.wso2.deployment.wso2isAnalyticsWorker1.imageTag }}
        {{- end }}
        env:
        -
          name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        resources:
          requests:
            memory: {{ .Values.wso2.deployment.wso2isAnalyticsWorker1.resources.requests.memory }}
            cpu: {{ .Values.wso2.deployment.wso2isAnalyticsWorker1.resources.requests.cpu }}
          limits:
            memory: {{ .Values.wso2.deployment.wso2isAnalyticsWorker1.resources.limits.memory }}
            cpu: {{ .Values.wso2.deployment.wso2isAnalyticsWorker1.resources.limits.cpu }}
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - nc -z localhost 9091
          initialDelaySeconds: {{ .Values.wso2.deployment.wso2isAnalyticsWorker1.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.wso2.deployment.wso2isAnalyticsWorker1.livenessProbe.periodSeconds }}
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - nc -z localhost 9091
          initialDelaySeconds: {{ .Values.wso2.deployment.wso2isAnalyticsWorker1.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.wso2.deployment.wso2isAnalyticsWorker1.readinessProbe.periodSeconds }}
        lifecycle:
          preStop:
            exec:
              command:  ['sh', '-c', '${WSO2_SERVER_HOME}/bin/worker.sh stop']
        imagePullPolicy: {{ .Values.wso2.deployment.wso2isAnalyticsWorker1.imagePullPolicy }}
        securityContext:
          runAsUser: 802
        ports:
        -
          containerPort: 9090
          protocol: TCP
        -
          containerPort: 9091
          protocol: TCP
        -
          containerPort: 9543
          protocol: TCP
        -
          containerPort: 9711
          protocol: TCP
        -
          containerPort: 9611
          protocol: TCP
        -
          containerPort: 7712
          protocol: TCP
        -
          containerPort: 7612
          protocol: TCP
        -
          containerPort: 7070
          protocol: TCP
        -
          containerPort: 7443
          protocol: TCP
        {{ if .Values.wso2.monitoring.enabled }}
        - containerPort: 2222
          protocol: TCP
          name: metrics
        {{ end }}
        volumeMounts:
        - name: wso2is-pattern-2-analytics-worker-conf
          mountPath: /home/wso2carbon/wso2-config-volume/conf/worker
        {{ if .Values.wso2.monitoring.enabled }}
        - name: shared-prometheus-jmx-jar
          mountPath: /home/wso2carbon/prometheus
        - name: identity-server-prometheus-exporter-conf
          mountPath: /home/wso2carbon/prometheus/config.yaml
          subPath: config.yaml
        - name: wso2is-pattern-2-analytics-worker-startup
          mountPath: /home/wso2carbon/wso2-config-volume/wso2/worker/bin
        {{ end }}
      {{ if .Values.wso2.centralizedLogging.enabled }}
        - name: shared-logs
          mountPath: /home/wso2carbon/wso2is-analytics-5.8.0/wso2/worker/logs
      - name: wso2is-analytics-worker-logstash
        image: docker.elastic.co/logstash/logstash:{{ .Values.wso2.centralizedLogging.logstash.imageTag }}
        volumeMounts:
        - name: shared-logs
          mountPath: /usr/share/logstash/wso2-logs/
        - name: logstash-yml
          mountPath: /usr/share/logstash/config/logstash.yml
          subPath: logstash.yml
        - name: c5-logstash-conf
          mountPath: /usr/share/logstash/pipeline/logstash.conf
          subPath: logstash.conf
        - name: shared-plugins
          mountPath: /usr/share/logstash/plugins/
        env:
        - name: NODE_ID
          value: {{ .Release.Name }}-analytics-worker-node-1
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: ELASTICSEARCH_USERNAME
          valueFrom:
            secretKeyRef:
              name: logstash-elasticsearch-creds
              key: username
        - name: ELASTICSEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: logstash-elasticsearch-creds
              key: password
        - name: ELASTICSEARCH_HOST
          value: {{ .Values.wso2.centralizedLogging.logstash.elasticsearch.host }}
      {{ end }}
      serviceAccountName: {{ .Values.kubernetes.serviceAccount }}
      {{- if .Values.wso2.deployment.wso2isAnalyticsWorker1.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.wso2.deployment.wso2isAnalyticsWorker1.imagePullSecrets }}
      {{- else if and (not (eq .Values.wso2.subscription.username "")) (not (eq .Values.wso2.subscription.password "")) }}
      imagePullSecrets:
      - name: {{ template "fullname" . }}-wso2-private-registry-creds
      {{ end }}
      volumes:
      - name: wso2is-pattern-2-analytics-worker-conf
        configMap:
          name: {{ template "fullname" . }}-analytics-worker-conf
      {{ if .Values.wso2.centralizedLogging.enabled }}
      - name: shared-logs
        emptyDir: {}
      - name: logstash-yml
        configMap:
          name: logstash-yml
      - name: c5-logstash-conf
        configMap:
          name: c5-logstash-conf
      - name: shared-plugins
        emptyDir: {}
      - name: logstash-elasticsearch-creds
        secret:
          secretName: logstash-elasticsearch-creds
      {{ end }}
      {{ if .Values.wso2.monitoring.enabled }}
      - name: shared-prometheus-jmx-jar
        emptyDir: {}
      - name: identity-server-prometheus-exporter-conf
        configMap:
          name: identity-server-prometheus-exporter-conf
      - name: wso2is-pattern-2-analytics-worker-startup
        configMap:
          name: {{ template "fullname" . }}-analytics-worker-startup
      {{ end }}
